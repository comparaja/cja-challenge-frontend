{"remainingRequest":"/home/digasmc/Documents/Vue/cja-challenge/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/digasmc/Documents/Vue/cja-challenge/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/digasmc/Documents/Vue/cja-challenge/src/App.vue","mtime":1634032056778},{"path":"/home/digasmc/Documents/Vue/cja-challenge/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/digasmc/Documents/Vue/cja-challenge/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/digasmc/Documents/Vue/cja-challenge/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/digasmc/Documents/Vue/cja-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/digasmc/Documents/Vue/cja-challenge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJy4vYXNzZXRzL2NvbG9ycy5jc3MnOwoKaHRtbCB7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2hpdGUzKTsKfQoKYm9keSB7CiAgbWFyZ2luOiAwOwp9CgojYXBwIHsKICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIGNvbG9yOiB2YXIoLS1ncmV5Mik7Cn0KCi5iYW5uZXIgewogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJsdWUxKTsKICBjb2xvcjogdmFyKC0td2hpdGUpOwogIHBhZGRpbmc6IDIwcHggY2FsYygoMTAwdncgLSAxMDIwcHgpIC8gMik7Cn0KCi5yZXN1bHRzIHsKICBwYWRkaW5nOiAyMHB4IGNhbGMoKDEwMHZ3IC0gMTAyMHB4KSAvIDIpOwp9CgoucmVzdWx0cyA+ICogewogIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0KCgpAbWVkaWEgKCBtYXgtd2lkdGg6IDEyMDBweCkgewogIC5iYW5uZXIsIC5yZXN1bHRzIHsKICAgIHBhZGRpbmc6IDIwcHg7CiAgfQp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <Navbar></Navbar>\n    <div class=\"banner\">\n      <h1>Resultados TV-Net-Voz</h1>\n      <p>Encontr√°mos {{ results.length }} resultado{{ results.length != 1 ? 's' : ''}} indicados para si.</p>\n    </div>\n    <Filters v-model=\"filter\" :providers=\"providers\" :connectionTypes=\"connectionTypes\" ></Filters>\n    <div class=\"results\">\n      <Result v-for=\"result in results\" :key=\"result.id\" :result=\"result\"></Result>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Navbar from './components/Navbar.vue'\nimport Filters from './components/Filters.vue'\nimport Result from './components/Result.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    Navbar,\n    Filters,\n    Result\n  },\n  data() {\n    return {\n      results: [],\n      providers: [],\n      connectionTypes: [],\n      filter: {\n        provider: '',\n        connectionType: '',\n        channels: \"30\",\n        internetSpeed: \"200\",\n        price: \"40\",\n        sortBy: 'monthlyPrice'\n      }\n    }\n  },\n  watch: {\n    filter: {\n      deep: true,\n      handler(val) {\n        this.getResults()\n      }\n    }\n  },\n  async mounted() {\n    await this.fetchProviders()\n    await this.fetchConnectionTypes()\n    this.getResults()\n  },\n  methods: {\n    async getResults() {\n      this.results = []\n      let request = '?isActive=true'\n\n      if(this.filter.provider) {\n        request += \"&providerId=\" + this.filter.provider\n      }\n\n      if(this.filter.connectionType) {\n        request += \"&connectionTypeId=\" + Number(this.filter.connectionType)\n      }\n\n      if(this.filter.sortBy) {\n        let dir = 'asc'\n        if(this.filter.sortBy != 'monthlyPrice') {\n          dir = 'desc'\n        }\n        request += \"&sortBy=\" + this.filter.sortBy + \"&sortDirection=\" + dir\n      } else {\n        request += \"&sortBy=monthlyPrice&sortDirection=asc\"\n        this.filter.sortBy = \"monthlyPrice\"\n      }\n\n      await fetch('http://localhost:8080/api/v1/products/list' + request, {\n        isActive: true,\n        providerId: this.filter.provider,\n        connectionTypeId: this.filter.connectionType\n      }).then((response) => {\n            return response.json()\n          }).then((data) => {\n            data.forEach((el) => {\n            this.results.push({\n              id: el.id,\n              numberOfChannels: el.numberOfChannels,\n              monthlyPrice: el.monthlyPrice,\n              description: el.description,\n              internetSpeed: el.internetSpeed,\n              provider: this.providers.filter(it => {\n                return it.id == el.providerId\n              })[0].name,\n              connectionType: this.connectionTypes.filter(it => {\n                return it.id == el.connectionTypeId\n              })[0].description,\n            })\n          })\n          })\n    },\n    async fetchProviders() {\n      await fetch('http://localhost:8080/api/v1/provider/list?isActive=true').then((response) => {\n          return response.json()\n        }).then((data) => {\n          this.providers = data\n        })\n    },\n    async fetchConnectionTypes() {\n      await fetch('http://localhost:8080/api/v1/connectionType/list?isActive=true').then((response) => {\n          return response.json()\n        }).then((data) => {\n          this.connectionTypes = data\n        })\n    },\n  }\n}\n</script>\n\n<style>\n@import './assets/colors.css';\n\nhtml {\n  background-color: var(--white3);\n}\n\nbody {\n  margin: 0;\n}\n\n#app {\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--grey2);\n}\n\n.banner {\n  background-color: var(--blue1);\n  color: var(--white);\n  padding: 20px calc((100vw - 1020px) / 2);\n}\n\n.results {\n  padding: 20px calc((100vw - 1020px) / 2);\n}\n\n.results > * {\n  margin-bottom: 20px;\n}\n\n\n@media ( max-width: 1200px) {\n  .banner, .results {\n    padding: 20px;\n  }\n}\n</style>\n"]}]}